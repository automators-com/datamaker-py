// This file is auto-generated by the datamaker-py SDK
// DO NOT EDIT MANUALLY
// Generated from version 0.7.0

// Monaco Editor CompletionItemKind enum values
// Reference: https://microsoft.github.io/monaco-editor/api/enums/monaco.languages.CompletionItemKind.html
export enum CompletionItemKind {
  Method = 0,
  Function = 1,
  Constructor = 2,
  Field = 3,
  Variable = 4,
  Class = 5,
  Struct = 6,
  Interface = 7,
  Module = 8,
  Property = 9,
  Event = 10,
  Operator = 11,
  Unit = 12,
  Value = 13,
  Constant = 14,
  Enum = 15,
  EnumMember = 16,
  Keyword = 17,
  Text = 18,
  Color = 19,
  File = 20,
  Reference = 21,
  Customcolor = 22,
  Folder = 23,
  TypeParameter = 24,
  Snippet = 25,
}

export interface DataMakerMethod {
  label: string;
  kind: number;
  insertText: string;
  documentation?: string;
  detail?: string;
  sortText?: string;
}

export interface DataMakerFieldType {
  label: string;
  kind: number;
  insertText: string;
  documentation?: string;
}

export const SDK_VERSION = "0.7.0";

export const METHOD_SUGGESTIONS: DataMakerMethod[] = [
  {
    label: "generate",
    kind: CompletionItemKind.Method,
    insertText: "generate(${1:template}: any)",
    documentation: "Generate data using a template.",
    detail: "Method: generate",
    sortText: "generate",
  },
  {
    label: "generate_from_template_id",
    kind: CompletionItemKind.Method,
    insertText: "generate_from_template_id(${1:template_id}: str, ${2:quantity}: int)",
    documentation: "Generate data from a template ID with specified quantity.",
    detail: "Method: generate_from_template_id",
    sortText: "generate_from_template_id",
  },
  {
    label: "get_templates",
    kind: CompletionItemKind.Method,
    insertText: "get_templates()",
    documentation: "Fetch all templates from the API.",
    detail: "Method: get_templates",
    sortText: "get_templates",
  },
  {
    label: "create_template",
    kind: CompletionItemKind.Method,
    insertText: "create_template(${1:template_data}: Dict, ${2:project_id}: str, ${3:team_id}: str)",
    documentation: "Create a new template.",
    detail: "Method: create_template",
    sortText: "create_template",
  },
  {
    label: "get_template",
    kind: CompletionItemKind.Method,
    insertText: "get_template(${1:template_id}: str)",
    documentation: "Get a specific template by ID.",
    detail: "Method: get_template",
    sortText: "get_template",
  },
  {
    label: "update_template",
    kind: CompletionItemKind.Method,
    insertText: "update_template(${1:template_id}: str, ${2:template_data}: Dict)",
    documentation: "Update a template.",
    detail: "Method: update_template",
    sortText: "update_template",
  },
  {
    label: "delete_template",
    kind: CompletionItemKind.Method,
    insertText: "delete_template(${1:template_id}: str)",
    documentation: "Delete a template.",
    detail: "Method: delete_template",
    sortText: "delete_template",
  },
  {
    label: "get_api_keys",
    kind: CompletionItemKind.Method,
    insertText: "get_api_keys()",
    documentation: "Get all API keys.",
    detail: "Method: get_api_keys",
    sortText: "get_api_keys",
  },
  {
    label: "create_api_key",
    kind: CompletionItemKind.Method,
    insertText: "create_api_key(${1:key}: str, ${2:scope}: str, ${3:name}: Optional[str], ${4:team_id}: Optional[str])",
    documentation: "Create a new API key.",
    detail: "Method: create_api_key",
    sortText: "create_api_key",
  },
  {
    label: "update_api_key",
    kind: CompletionItemKind.Method,
    insertText: "update_api_key(${1:key_id}: str, ${2:key}: str, ${3:name}: Optional[str], ${4:team_id}: Optional[str])",
    documentation: "Update an API key.",
    detail: "Method: update_api_key",
    sortText: "update_api_key",
  },
  {
    label: "delete_api_key",
    kind: CompletionItemKind.Method,
    insertText: "delete_api_key(${1:key_id}: str)",
    documentation: "Delete an API key.",
    detail: "Method: delete_api_key",
    sortText: "delete_api_key",
  },
  {
    label: "get_connections",
    kind: CompletionItemKind.Method,
    insertText: "get_connections()",
    documentation: "Get all connections.",
    detail: "Method: get_connections",
    sortText: "get_connections",
  },
  {
    label: "create_connection",
    kind: CompletionItemKind.Method,
    insertText: "create_connection(${1:name}: str, ${2:connection_type}: str, ${3:connection_string}: str, ${4:created_by}: str, ${5:project_id}: str, ${6:team_id}: str)",
    documentation: "Create a new database connection.",
    detail: "Method: create_connection",
    sortText: "create_connection",
  },
  {
    label: "update_connection",
    kind: CompletionItemKind.Method,
    insertText: "update_connection(${1:connection_id}: str, ${2:name}: str, ${3:connection_type}: str, ${4:connection_string}: str, ${5:created_by}: str, ${6:project_id}: str, ${7:team_id}: str)",
    documentation: "Update a database connection.",
    detail: "Method: update_connection",
    sortText: "update_connection",
  },
  {
    label: "delete_connection",
    kind: CompletionItemKind.Method,
    insertText: "delete_connection(${1:connection_id}: str)",
    documentation: "Delete a database connection.",
    detail: "Method: delete_connection",
    sortText: "delete_connection",
  },
  {
    label: "test_connection",
    kind: CompletionItemKind.Method,
    insertText: "test_connection(${1:connection_data}: Dict)",
    documentation: "Test a database connection.",
    detail: "Method: test_connection",
    sortText: "test_connection",
  },
  {
    label: "get_tables",
    kind: CompletionItemKind.Method,
    insertText: "get_tables()",
    documentation: "Get all tables from connections.",
    detail: "Method: get_tables",
    sortText: "get_tables",
  },
  {
    label: "get_projects",
    kind: CompletionItemKind.Method,
    insertText: "get_projects()",
    documentation: "Get all projects.",
    detail: "Method: get_projects",
    sortText: "get_projects",
  },
  {
    label: "create_project",
    kind: CompletionItemKind.Method,
    insertText: "create_project(${1:project_data}: Dict, ${2:team_id}: str)",
    documentation: "Create a new project.",
    detail: "Method: create_project",
    sortText: "create_project",
  },
  {
    label: "get_project",
    kind: CompletionItemKind.Method,
    insertText: "get_project(${1:project_id}: str)",
    documentation: "Get a specific project by ID.",
    detail: "Method: get_project",
    sortText: "get_project",
  },
  {
    label: "update_project",
    kind: CompletionItemKind.Method,
    insertText: "update_project(${1:project_id}: str, ${2:project_data}: Dict)",
    documentation: "Update a project.",
    detail: "Method: update_project",
    sortText: "update_project",
  },
  {
    label: "delete_project",
    kind: CompletionItemKind.Method,
    insertText: "delete_project(${1:project_id}: str)",
    documentation: "Delete a project.",
    detail: "Method: delete_project",
    sortText: "delete_project",
  },
  {
    label: "get_users",
    kind: CompletionItemKind.Method,
    insertText: "get_users()",
    documentation: "Get all users.",
    detail: "Method: get_users",
    sortText: "get_users",
  },
  {
    label: "create_user",
    kind: CompletionItemKind.Method,
    insertText: "create_user(${1:user_data}: Dict, ${2:user_id}: str)",
    documentation: "Create a new user.",
    detail: "Method: create_user",
    sortText: "create_user",
  },
  {
    label: "get_current_user",
    kind: CompletionItemKind.Method,
    insertText: "get_current_user()",
    documentation: "Get current user information.",
    detail: "Method: get_current_user",
    sortText: "get_current_user",
  },
  {
    label: "provision_user",
    kind: CompletionItemKind.Method,
    insertText: "provision_user(${1:user_data}: Dict)",
    documentation: "Provision a new user.",
    detail: "Method: provision_user",
    sortText: "provision_user",
  },
  {
    label: "update_user",
    kind: CompletionItemKind.Method,
    insertText: "update_user(${1:user_id}: str, ${2:user_data}: Dict)",
    documentation: "Update a user.",
    detail: "Method: update_user",
    sortText: "update_user",
  },
  {
    label: "patch_user",
    kind: CompletionItemKind.Method,
    insertText: "patch_user(${1:user_id}: str, ${2:user_data}: Dict)",
    documentation: "Partially update a user.",
    detail: "Method: patch_user",
    sortText: "patch_user",
  },
  {
    label: "delete_user",
    kind: CompletionItemKind.Method,
    insertText: "delete_user(${1:user_id}: str)",
    documentation: "Delete a user.",
    detail: "Method: delete_user",
    sortText: "delete_user",
  },
  {
    label: "get_teams",
    kind: CompletionItemKind.Method,
    insertText: "get_teams()",
    documentation: "Get all teams.",
    detail: "Method: get_teams",
    sortText: "get_teams",
  },
  {
    label: "create_team",
    kind: CompletionItemKind.Method,
    insertText: "create_team(${1:team_data}: Dict)",
    documentation: "Create a new team.",
    detail: "Method: create_team",
    sortText: "create_team",
  },
  {
    label: "update_team",
    kind: CompletionItemKind.Method,
    insertText: "update_team(${1:team_id}: str, ${2:team_data}: Dict)",
    documentation: "Update a team.",
    detail: "Method: update_team",
    sortText: "update_team",
  },
  {
    label: "delete_team",
    kind: CompletionItemKind.Method,
    insertText: "delete_team(${1:team_id}: str)",
    documentation: "Delete a team.",
    detail: "Method: delete_team",
    sortText: "delete_team",
  },
  {
    label: "setup_team",
    kind: CompletionItemKind.Method,
    insertText: "setup_team(${1:team_data}: Dict)",
    documentation: "Setup a new team.",
    detail: "Method: setup_team",
    sortText: "setup_team",
  },
  {
    label: "get_team_members",
    kind: CompletionItemKind.Method,
    insertText: "get_team_members()",
    documentation: "Get all team members.",
    detail: "Method: get_team_members",
    sortText: "get_team_members",
  },
  {
    label: "add_team_member",
    kind: CompletionItemKind.Method,
    insertText: "add_team_member(${1:member_data}: Dict)",
    documentation: "Add a new team member.",
    detail: "Method: add_team_member",
    sortText: "add_team_member",
  },
  {
    label: "invite_team_member",
    kind: CompletionItemKind.Method,
    insertText: "invite_team_member(${1:invite_data}: Dict)",
    documentation: "Invite a new team member.",
    detail: "Method: invite_team_member",
    sortText: "invite_team_member",
  },
  {
    label: "update_team_member",
    kind: CompletionItemKind.Method,
    insertText: "update_team_member(${1:member_id}: str, ${2:member_data}: Dict)",
    documentation: "Update a team member.",
    detail: "Method: update_team_member",
    sortText: "update_team_member",
  },
  {
    label: "remove_team_member",
    kind: CompletionItemKind.Method,
    insertText: "remove_team_member(${1:member_id}: str)",
    documentation: "Remove a team member.",
    detail: "Method: remove_team_member",
    sortText: "remove_team_member",
  },
  {
    label: "get_custom_data_types",
    kind: CompletionItemKind.Method,
    insertText: "get_custom_data_types(${1:project_id}: str)",
    documentation: "Get all custom data types for a specific project.",
    detail: "Method: get_custom_data_types",
    sortText: "get_custom_data_types",
  },
  {
    label: "create_custom_data_type",
    kind: CompletionItemKind.Method,
    insertText: "create_custom_data_type(${1:data_type_data}: Dict)",
    documentation: "Create a new custom data type.",
    detail: "Method: create_custom_data_type",
    sortText: "create_custom_data_type",
  },
  {
    label: "update_custom_data_type",
    kind: CompletionItemKind.Method,
    insertText: "update_custom_data_type(${1:data_type_id}: str, ${2:data_type_data}: Dict)",
    documentation: "Update a custom data type.",
    detail: "Method: update_custom_data_type",
    sortText: "update_custom_data_type",
  },
  {
    label: "delete_custom_data_type",
    kind: CompletionItemKind.Method,
    insertText: "delete_custom_data_type(${1:data_type_id}: str)",
    documentation: "Delete a custom data type.",
    detail: "Method: delete_custom_data_type",
    sortText: "delete_custom_data_type",
  },
  {
    label: "get_endpoint_folders",
    kind: CompletionItemKind.Method,
    insertText: "get_endpoint_folders()",
    documentation: "Get all endpoint folders.",
    detail: "Method: get_endpoint_folders",
    sortText: "get_endpoint_folders",
  },
  {
    label: "create_endpoint_folder",
    kind: CompletionItemKind.Method,
    insertText: "create_endpoint_folder(${1:folder_data}: Dict)",
    documentation: "Create a new endpoint folder.",
    detail: "Method: create_endpoint_folder",
    sortText: "create_endpoint_folder",
  },
  {
    label: "update_endpoint_folder",
    kind: CompletionItemKind.Method,
    insertText: "update_endpoint_folder(${1:folder_id}: str, ${2:folder_data}: Dict)",
    documentation: "Update an endpoint folder.",
    detail: "Method: update_endpoint_folder",
    sortText: "update_endpoint_folder",
  },
  {
    label: "delete_endpoint_folder",
    kind: CompletionItemKind.Method,
    insertText: "delete_endpoint_folder(${1:folder_id}: str)",
    documentation: "Delete an endpoint folder.",
    detail: "Method: delete_endpoint_folder",
    sortText: "delete_endpoint_folder",
  },
  {
    label: "get_endpoints",
    kind: CompletionItemKind.Method,
    insertText: "get_endpoints()",
    documentation: "Get all endpoints.",
    detail: "Method: get_endpoints",
    sortText: "get_endpoints",
  },
  {
    label: "create_endpoint",
    kind: CompletionItemKind.Method,
    insertText: "create_endpoint(${1:endpoint_data}: Dict)",
    documentation: "Create a new endpoint.",
    detail: "Method: create_endpoint",
    sortText: "create_endpoint",
  },
  {
    label: "get_endpoint",
    kind: CompletionItemKind.Method,
    insertText: "get_endpoint(${1:endpoint_id}: str)",
    documentation: "Get a specific endpoint by ID.",
    detail: "Method: get_endpoint",
    sortText: "get_endpoint",
  },
  {
    label: "update_endpoint",
    kind: CompletionItemKind.Method,
    insertText: "update_endpoint(${1:endpoint_id}: str, ${2:endpoint_data}: Dict)",
    documentation: "Update an endpoint.",
    detail: "Method: update_endpoint",
    sortText: "update_endpoint",
  },
  {
    label: "delete_endpoint",
    kind: CompletionItemKind.Method,
    insertText: "delete_endpoint(${1:endpoint_id}: str)",
    documentation: "Delete an endpoint.",
    detail: "Method: delete_endpoint",
    sortText: "delete_endpoint",
  },
  {
    label: "get_template_folders",
    kind: CompletionItemKind.Method,
    insertText: "get_template_folders()",
    documentation: "Get all template folders.",
    detail: "Method: get_template_folders",
    sortText: "get_template_folders",
  },
  {
    label: "create_template_folder",
    kind: CompletionItemKind.Method,
    insertText: "create_template_folder(${1:folder_data}: Dict)",
    documentation: "Create a new template folder.",
    detail: "Method: create_template_folder",
    sortText: "create_template_folder",
  },
  {
    label: "update_template_folder",
    kind: CompletionItemKind.Method,
    insertText: "update_template_folder(${1:folder_id}: str, ${2:folder_data}: Dict)",
    documentation: "Update a template folder.",
    detail: "Method: update_template_folder",
    sortText: "update_template_folder",
  },
  {
    label: "delete_template_folder",
    kind: CompletionItemKind.Method,
    insertText: "delete_template_folder(${1:folder_id}: str)",
    documentation: "Delete a template folder.",
    detail: "Method: delete_template_folder",
    sortText: "delete_template_folder",
  },
  {
    label: "get_shortcuts",
    kind: CompletionItemKind.Method,
    insertText: "get_shortcuts()",
    documentation: "Get all shortcuts.",
    detail: "Method: get_shortcuts",
    sortText: "get_shortcuts",
  },
  {
    label: "create_shortcut",
    kind: CompletionItemKind.Method,
    insertText: "create_shortcut(${1:shortcut_data}: Dict)",
    documentation: "Create a new shortcut.",
    detail: "Method: create_shortcut",
    sortText: "create_shortcut",
  },
  {
    label: "update_shortcut",
    kind: CompletionItemKind.Method,
    insertText: "update_shortcut(${1:shortcut_id}: str, ${2:shortcut_data}: Dict)",
    documentation: "Update a shortcut.",
    detail: "Method: update_shortcut",
    sortText: "update_shortcut",
  },
  {
    label: "delete_shortcut",
    kind: CompletionItemKind.Method,
    insertText: "delete_shortcut(${1:shortcut_id}: str)",
    documentation: "Delete a shortcut.",
    detail: "Method: delete_shortcut",
    sortText: "delete_shortcut",
  },
  {
    label: "get_feedback",
    kind: CompletionItemKind.Method,
    insertText: "get_feedback()",
    documentation: "Get all feedback.",
    detail: "Method: get_feedback",
    sortText: "get_feedback",
  },
  {
    label: "submit_feedback",
    kind: CompletionItemKind.Method,
    insertText: "submit_feedback(${1:feedback_data}: Dict)",
    documentation: "Submit new feedback.",
    detail: "Method: submit_feedback",
    sortText: "submit_feedback",
  },
  {
    label: "update_feedback",
    kind: CompletionItemKind.Method,
    insertText: "update_feedback(${1:feedback_id}: str, ${2:feedback_data}: Dict)",
    documentation: "Update feedback.",
    detail: "Method: update_feedback",
    sortText: "update_feedback",
  },
  {
    label: "delete_feedback",
    kind: CompletionItemKind.Method,
    insertText: "delete_feedback(${1:feedback_id}: str)",
    documentation: "Delete feedback.",
    detail: "Method: delete_feedback",
    sortText: "delete_feedback",
  },
  {
    label: "export_to_rest",
    kind: CompletionItemKind.Method,
    insertText: "export_to_rest(${1:export_data}: Dict)",
    documentation: "Export data to REST API.",
    detail: "Method: export_to_rest",
    sortText: "export_to_rest",
  },
  {
    label: "export_to_database",
    kind: CompletionItemKind.Method,
    insertText: "export_to_database(${1:export_data}: Dict)",
    documentation: "Export data to database.",
    detail: "Method: export_to_database",
    sortText: "export_to_database",
  },
  {
    label: "validate_api_key",
    kind: CompletionItemKind.Method,
    insertText: "validate_api_key()",
    documentation: "Test API key authentication.",
    detail: "Method: validate_api_key",
    sortText: "validate_api_key",
  },
];

export const FIELD_TYPE_SUGGESTIONS: DataMakerFieldType[] = [
  {
    label: "AIField",
    kind: CompletionItemKind.Class,
    insertText: "AIField(${1:name}, ${2:options})",
    documentation: "Generate AI-powered content",
  },
  {
    label: "BooleanField",
    kind: CompletionItemKind.Class,
    insertText: "BooleanField(${1:name}, ${2:options})",
    documentation: "Generate boolean values",
  },
  {
    label: "CustomField",
    kind: CompletionItemKind.Class,
    insertText: "CustomField(${1:name}, ${2:options})",
    documentation: "Generate from custom values",
  },
  {
    label: "FloatField",
    kind: CompletionItemKind.Class,
    insertText: "FloatField(${1:name}, ${2:options})",
    documentation: "Generate random float values",
  },
  {
    label: "NumberField",
    kind: CompletionItemKind.Class,
    insertText: "NumberField(${1:name}, ${2:options})",
    documentation: "Generate random numbers",
  },
  {
    label: "UUIDField",
    kind: CompletionItemKind.Class,
    insertText: "UUIDField(${1:name}, ${2:options})",
    documentation: "Generate UUID values",
  },
  {
    label: "WordsField",
    kind: CompletionItemKind.Class,
    insertText: "WordsField(${1:name}, ${2:options})",
    documentation: "Generate random words",
  },
];

// CompletionItem interface compatible with Monaco Editor
export interface CompletionItem {
  label: string;
  kind: number;
  insertText: string;
  insertTextRules?: number;
  documentation?: string;
  detail?: string;
  sortText?: string;
}

// InsertAsSnippet rule value (equivalent to monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet = 4)
const INSERT_AS_SNIPPET = 4;

export function createMethodCompletionItem(item: DataMakerMethod): CompletionItem {
  return {
    label: item.label,
    kind: item.kind,
    insertText: item.insertText,
    insertTextRules: INSERT_AS_SNIPPET,
    documentation: item.documentation,
    detail: item.detail,
    sortText: item.sortText,
  };
}

export function createFieldTypeCompletionItem(item: DataMakerFieldType): CompletionItem {
  return {
    label: item.label,
    kind: item.kind,
    insertText: item.insertText,
    insertTextRules: INSERT_AS_SNIPPET,
    documentation: item.documentation,
  };
}

export const ALL_SUGGESTIONS: CompletionItem[] = [
  ...METHOD_SUGGESTIONS.map(createMethodCompletionItem),
  ...FIELD_TYPE_SUGGESTIONS.map(createFieldTypeCompletionItem),
];
